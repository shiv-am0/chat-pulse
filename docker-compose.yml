services:
  # MongoDB - Database for persistent storage
  mongodb:
    image: mongo:latest
    container_name: chat-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: chat-app
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - chat-network

  # Redis Stack - In-memory storage for room membership + UI
  redis-stack:
    image: redis/redis-stack:latest
    container_name: chat-redis-stack
    restart: unless-stopped
    ports:
      - "8001:8001"  # RedisInsight UI
      - "6379:6379"  # Redis
    environment:
      REDIS_ARGS: --save 60 1000 --loglevel warning
    volumes:
      - redis_data:/data
    networks:
      - chat-network

  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: chat-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - chat-network

  # Kafka - Message broker for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: chat-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - chat-network



  # Kafka UI for monitoring Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: chat-kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - chat-network

  # MongoDB UI for database monitoring (Mongo Express - Alternative to Compass)
  mongo-express:
    image: mongo-express:latest
    container_name: chat-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    depends_on:
      - mongodb
    networks:
      - chat-network

  # MongoDB Compass (Alternative UI - requires X11 forwarding)
  # Uncomment if you want to run Compass in Docker (Linux only)
  # mongo-compass:
  #   image: mongo-express:latest  # Placeholder - Compass doesn't have official Docker image
  #   container_name: chat-mongo-compass
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     DISPLAY: ${DISPLAY}
  #   volumes:
  #     - /tmp/.X11-unix:/tmp/.X11-unix
  #   depends_on:
  #     - mongodb
  #   networks:
  #     - chat-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local

networks:
  chat-network:
    driver: bridge 